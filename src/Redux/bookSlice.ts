import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { getAll, update } from '../API/booksAPI'
import { book } from '../components/Book/Book.component'
import { RootState } from './store'

export interface bookState {
    value: book[]
    loading: boolean
    error: boolean
}

const initialState: bookState = {
    value: [],
    loading: false,
    error: false
}

export const getAllBooks = createAsyncThunk('book/getAllBooks', async () => {
    const response = await getAll()
    // The value we return becomes the `fulfilled` action payload
    return response
})

export const updateBook = createAsyncThunk('book/updateBook', async (value: { book: book; shelf: string }) => {
    await update(value.book, value.shelf)
    // The value we return becomes the `fulfilled` action payload
    return { book: value.book.id, shelf: value.shelf }
})

export const bookSlice = createSlice({
    name: 'book',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            // ***********
            // get all
            // ***********
            .addCase(getAllBooks.pending, (state) => {
                state.loading = true
                state.error = false
            })
            .addCase(getAllBooks.fulfilled, (state, action) => {
                state.loading = false
                state.error = false
                state.value = action.payload
            })
            .addCase(getAllBooks.rejected, (state) => {
                state.error = true
                state.loading = false
            })
            // ***********
            // update book
            // ***********
            .addCase(updateBook.pending, (state) => {
                state.loading = true
                state.error = false
            })
            .addCase(updateBook.fulfilled, (state, action) => {
                state.loading = false
                state.error = false
                console.log(action.payload)
                state.value = state.value.map((book) =>
                    book.id === action.payload.book ? { ...book, shelf: action.payload.shelf } : book
                )
                // state.value = action.payload
            })
            .addCase(updateBook.rejected, (state) => {
                state.error = true
                state.loading = false
            })
    }
})

// export const { increment, decrement, incrementByAmount } = bookSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const bookState = (state: RootState) => state.books

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default bookSlice.reducer
